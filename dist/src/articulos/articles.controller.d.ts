import { User as U } from '../usuarios/entities';
import { articleDTO, updateArticleDTO, ArticlesModelService, articleViewsDTO } from './articles-model.service';
import { S3BucketService } from "../s3/s3-bucket.service";
import { Response } from 'express';
export declare class ArticlesController {
    private articlesModel;
    private S3BucketService;
    constructor(articlesModel: ArticlesModelService, S3BucketService: S3BucketService);
    validarCaptcha(): Promise<unknown[]>;
    validarbusqueda(): Promise<unknown[]>;
    accioncaptcha(body: any): Promise<void>;
    accionbusqueda(body: any): Promise<void>;
    Article(id: string, user: U): any;
    Like(idArticulo: any, user: U): any;
    DisLike(idArticulo: any, user: U): any;
    Favorite(idArticulo: any, user: U): any;
    singleArticle(id: string, user: U): any;
    singleArticle2(id: string, user: U): any;
    prueba(id: string, user: U): any;
    deleteArticle(id: string, user: U): any;
    createArticle(body: articleDTO, user: U): any;
    cambiarArticulo(body: any): any;
    createArticleRequired(body: any): Promise<any>;
    VerifyRequired(body: any): Promise<boolean>;
    VerifyRequiredFecha(body: any): Promise<boolean>;
    Active(body: any): Promise<any>;
    VerifyRequiredJarvis(body: any): Promise<any>;
    VerifyArticleJarvis(body: any): Promise<any>;
    tablaobligatorios(): Promise<import("mysql/lib/protocol/packets/OkPacket") | import("mysql/lib/protocol/packets/ResultSetHeader") | import("mysql/lib/protocol/packets/RowDataPacket")[] | import("mysql/lib/protocol/packets/RowDataPacket")[][] | import("mysql/lib/protocol/packets/OkPacket")[]>;
    viewRequired(body: any): Promise<void>;
    validarCuestionario(body: any): Promise<[import("mysql/lib/protocol/packets/OkPacket") | import("mysql/lib/protocol/packets/ResultSetHeader") | import("mysql/lib/protocol/packets/RowDataPacket")[] | import("mysql/lib/protocol/packets/RowDataPacket")[][] | import("mysql/lib/protocol/packets/OkPacket")[], import("mysql2").FieldPacket[]]>;
    guardarCuestionario(body: any): Promise<void>;
    guardarResultado(body: any): void;
    buscarRequired(body: any): Promise<import("mysql/lib/protocol/packets/OkPacket") | import("mysql/lib/protocol/packets/ResultSetHeader") | import("mysql/lib/protocol/packets/RowDataPacket")[] | import("mysql/lib/protocol/packets/RowDataPacket")[][] | import("mysql/lib/protocol/packets/OkPacket")[]>;
    ArticleRequiredTotal(body: any): Promise<unknown[]>;
    editarPeriodo(body: any): Promise<import("mysql/lib/protocol/packets/OkPacket") | import("mysql/lib/protocol/packets/ResultSetHeader") | import("mysql/lib/protocol/packets/RowDataPacket")[] | import("mysql/lib/protocol/packets/RowDataPacket")[][] | import("mysql/lib/protocol/packets/OkPacket")[]>;
    uploadFile(file: any, idArticle: any): Promise<{
        file: any;
    }>;
    getFile(idArticle: any, fileName: any, res: Response): void;
    getArticleFiles(file: any, idArticle: any): Promise<import("./entities").archivoRaw[]>;
    updateArticle(body: updateArticleDTO, user: U, id: string): any;
    addLike(idArticulo: any, user: U): any;
    addDisLike(idArticulo: any, user: U): any;
    addFavorite(idArticulo: any, user: U): any;
    addViews(idArticulo: any, user: U, body: articleViewsDTO): any;
    getcliente(): Promise<unknown[]>;
    getpcrc(body: any): Promise<unknown[]>;
    getObligatorioEdit(body: any): Promise<unknown[]>;
    getObligatorioPreguntas(body: any): Promise<unknown[]>;
    getValidarRespuestas(body: any): Promise<1 | 0>;
    guardarPreguntas(body: any): Promise<void>;
    resultadoCuestionario(body: any): Promise<unknown[]>;
    resultadocategoriaCuestionario(body: any): Promise<unknown[]>;
    getcuestionarioTotal(body: any): Promise<{
        total_cuestionarios: any;
        total_exportar: any[];
    }>;
    getcuestionariocategoriaTotal(body: any): Promise<{
        total_cuestionarios: any;
        total_exportar: any[];
    }>;
    getAllCuestionarioLimit(body: any, res: any): Promise<void>;
    getAllCuestionarioCategoriaLimit(body: any, res: any): Promise<void>;
    habilitarobligatorio(body: any): Promise<void>;
    getMultipleUser(body: any): Promise<unknown[]>;
    guardarpcrcautomatizados(body: any): Promise<void>;
    eliminarpcrcautomatizados(body: any): Promise<void>;
}
